package com.zosh.controller;

import java.util.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
//import org.springframework.web.bind.annotation.PostMapping;
//import org.springframework.web.bind.annotation.RequestBody;
//import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RestController;

import com.zosh.models.User;
import com.zosh.services.UserService;

@RestController
public class UserController {
	
	@Autowired
	UserService userService;
	
	@PostMapping("/users")
	public User createUser(@RequestBody User user) {
		
		User newUser = userService.registerUser(user);
		return newUser;
		
	}
	
	@GetMapping("/api/users")
	public List<User> getUsers() {
		
		return userService.showUser();
		
	}

	@GetMapping("/api/users/{userId}")
	public User getUserById(@PathVariable("userId")Integer id) throws Exception{
		
		User findUser=userService.findUserById(id);
		return findUser;
		
	}

	@PutMapping("/api/users/{userId}")
	public void editUser(@PathVariable("userId")Integer id,@RequestBody User user) throws Exception{
		
		userService.updateUser(user,id);
		
	}
	
	@PutMapping("/api/users/follow/{userId1}/{userId2}")
	public void followUserHandler(@PathVariable Integer userId1,@PathVariable Integer userId2) throws Exception {
		
		userService.followUser(userId1,userId2);
		
	}
	
	@GetMapping("/api/users/search")
	public List<User> searchUserHandler(@RequestParam String query){
		
		return userService.searchUser(query);
		
	}
	
//	
//	@DeleteMapping("/users/{userId}")
//	public User deleteUser(@PathVariable("userId") Integer id) throws Exception{
//		
//		Optional<User> delUser=userRepository.findById(id);
//		if(delUser.isEmpty())throw new Exception("User doesn't exist with user id :  "+id);
//		userRepository.delete(delUser.get());
//		return delUser.get();
//		
//	}
	
}
